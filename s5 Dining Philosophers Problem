import threading
import time
import random

# Dining Philosophers Problem
def dining_philosophers():
    class Philosopher(threading.Thread):
        def __init__(self, index, left_fork, right_fork, iterations):
            threading.Thread.__init__(self)
            self.index = index
            self.left_fork = left_fork
            self.right_fork = right_fork
            self.iterations = iterations

        def run(self):
            for _ in range(self.iterations):
                print(f"Philosopher {self.index} is thinking.")
                time.sleep(random.random())
                print(f"Philosopher {self.index} is hungry.")
                self.eat()

        def eat(self):
            with self.left_fork:
                with self.right_fork:
                    print(f"Philosopher {self.index} is eating.")
                    time.sleep(random.random())
                    print(f"Philosopher {self.index} finished eating.")

    forks = [threading.Lock() for _ in range(5)]
    iterations = int(input("Enter number of iterations for each philosopher: "))
    philosophers = [Philosopher(i, forks[i % 5], forks[(i + 1) % 5], iterations) for i in range(5)]

    for p in philosophers:
        p.start()

    for p in philosophers:
        p.join()


def main():
    while True:
        print("\n--- Synchronization Problems Menu ---")
        print("1. Dining Philosophers Problem")
        print("2. Exit")

        choice = int(input("Choose a problem to run : "))

        if choice == 1:
            print("\nRunning Dining Philosophers Problem......")
             dining_philosophers()
        elif choice == 2:
            print("\nExiting...")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()
